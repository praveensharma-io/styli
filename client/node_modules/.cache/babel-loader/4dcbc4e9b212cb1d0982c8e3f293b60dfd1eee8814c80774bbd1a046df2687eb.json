{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\n\n// API base URL - in production, this would come from environment variables\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\nconst useServerDrivenUI = (pageType, pageId, userContext = {}) => {\n  _s();\n  const [layout, setLayout] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastFetched, setLastFetched] = useState(null);\n  const fetchLayout = useCallback(async () => {\n    try {\n      console.log('🔄 Fetching layout:', {\n        pageType,\n        pageId,\n        userContext\n      });\n      setLoading(true);\n      setError(null);\n      const queryParams = new URLSearchParams({\n        ...userContext,\n        timestamp: Date.now() // Cache busting\n      });\n      const apiUrl = `${API_BASE_URL}/api/layouts/${pageType}/${pageId}?${queryParams}`;\n      console.log('📡 API URL:', apiUrl);\n\n      // Use the full backend URL since React app is on port 3001 and backend is on port 3000\n      const response = await fetch(apiUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        mode: 'cors'\n      });\n      console.log('📥 Response status:', response.status);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('📦 Response data:', data);\n      if (data.success) {\n        setLayout(data.layout);\n        setLastFetched(Date.now());\n        console.log('✅ Layout loaded successfully');\n      } else {\n        setError(data.message || 'Failed to load layout');\n        console.error('❌ Layout load failed:', data.message);\n      }\n    } catch (error) {\n      console.error('💥 Error fetching layout:', error);\n      setError(`Failed to load page layout: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [pageType, pageId, userContext]);\n  const refreshLayout = useCallback(() => {\n    console.log('🔄 Refreshing layout...');\n    fetchLayout();\n  }, [fetchLayout]);\n  const updateComponentData = useCallback((componentId, newData) => {\n    if (!layout) return;\n    setLayout(prevLayout => ({\n      ...prevLayout,\n      components: prevLayout.components.map(component => component.id === componentId ? {\n        ...component,\n        data: {\n          ...component.data,\n          ...newData\n        }\n      } : component)\n    }));\n  }, [layout]);\n  const getComponentById = useCallback(componentId => {\n    if (!layout) return null;\n    return layout.components.find(component => component.id === componentId);\n  }, [layout]);\n  const getComponentsByType = useCallback(componentType => {\n    if (!layout) return [];\n    return layout.components.filter(component => component.type === componentType);\n  }, [layout]);\n  useEffect(() => {\n    console.log('🎯 useServerDrivenUI effect triggered:', {\n      pageType,\n      pageId\n    });\n    fetchLayout();\n  }, [fetchLayout]);\n  return {\n    layout,\n    loading,\n    error,\n    lastFetched,\n    refreshLayout,\n    updateComponentData,\n    getComponentById,\n    getComponentsByType\n  };\n};\n_s(useServerDrivenUI, \"VJyY/KxWkE9X/mXM6vB6h/IHzC4=\");\nexport default useServerDrivenUI;","map":{"version":3,"names":["useState","useEffect","useCallback","API_BASE_URL","process","env","REACT_APP_API_URL","useServerDrivenUI","pageType","pageId","userContext","_s","layout","setLayout","loading","setLoading","error","setError","lastFetched","setLastFetched","fetchLayout","console","log","queryParams","URLSearchParams","timestamp","Date","now","apiUrl","response","fetch","method","headers","mode","status","ok","Error","data","json","success","message","refreshLayout","updateComponentData","componentId","newData","prevLayout","components","map","component","id","getComponentById","find","getComponentsByType","componentType","filter","type"],"sources":["/Users/macos/stylii/client/src/hooks/useServerDrivenUI.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\n// API base URL - in production, this would come from environment variables\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n\nconst useServerDrivenUI = (pageType, pageId, userContext = {}) => {\n  const [layout, setLayout] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastFetched, setLastFetched] = useState(null);\n\n  const fetchLayout = useCallback(async () => {\n    try {\n      console.log('🔄 Fetching layout:', { pageType, pageId, userContext });\n      setLoading(true);\n      setError(null);\n\n      const queryParams = new URLSearchParams({\n        ...userContext,\n        timestamp: Date.now() // Cache busting\n      });\n\n      const apiUrl = `${API_BASE_URL}/api/layouts/${pageType}/${pageId}?${queryParams}`;\n      console.log('📡 API URL:', apiUrl);\n\n      // Use the full backend URL since React app is on port 3001 and backend is on port 3000\n      const response = await fetch(apiUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        mode: 'cors'\n      });\n      console.log('📥 Response status:', response.status);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('📦 Response data:', data);\n\n      if (data.success) {\n        setLayout(data.layout);\n        setLastFetched(Date.now());\n        console.log('✅ Layout loaded successfully');\n      } else {\n        setError(data.message || 'Failed to load layout');\n        console.error('❌ Layout load failed:', data.message);\n      }\n    } catch (error) {\n      console.error('💥 Error fetching layout:', error);\n      setError(`Failed to load page layout: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [pageType, pageId, userContext]);\n\n  const refreshLayout = useCallback(() => {\n    console.log('🔄 Refreshing layout...');\n    fetchLayout();\n  }, [fetchLayout]);\n\n  const updateComponentData = useCallback((componentId, newData) => {\n    if (!layout) return;\n\n    setLayout(prevLayout => ({\n      ...prevLayout,\n      components: prevLayout.components.map(component =>\n        component.id === componentId\n          ? { ...component, data: { ...component.data, ...newData } }\n          : component\n      )\n    }));\n  }, [layout]);\n\n  const getComponentById = useCallback((componentId) => {\n    if (!layout) return null;\n    return layout.components.find(component => component.id === componentId);\n  }, [layout]);\n\n  const getComponentsByType = useCallback((componentType) => {\n    if (!layout) return [];\n    return layout.components.filter(component => component.type === componentType);\n  }, [layout]);\n\n  useEffect(() => {\n    console.log('🎯 useServerDrivenUI effect triggered:', { pageType, pageId });\n    fetchLayout();\n  }, [fetchLayout]);\n\n  return {\n    layout,\n    loading,\n    error,\n    lastFetched,\n    refreshLayout,\n    updateComponentData,\n    getComponentById,\n    getComponentsByType\n  };\n};\n\nexport default useServerDrivenUI; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;;AAExD;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,MAAM,EAAEC,WAAW,GAAG,CAAC,CAAC,KAAK;EAAAC,EAAA;EAChE,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAEpD,MAAMoB,WAAW,GAAGlB,WAAW,CAAC,YAAY;IAC1C,IAAI;MACFmB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE;QAAEd,QAAQ;QAAEC,MAAM;QAAEC;MAAY,CAAC,CAAC;MACrEK,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,MAAMM,WAAW,GAAG,IAAIC,eAAe,CAAC;QACtC,GAAGd,WAAW;QACde,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;MACxB,CAAC,CAAC;MAEF,MAAMC,MAAM,GAAG,GAAGzB,YAAY,gBAAgBK,QAAQ,IAAIC,MAAM,IAAIc,WAAW,EAAE;MACjFF,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEM,MAAM,CAAC;;MAElC;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,MAAM,EAAE;QACnCG,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAE;MACR,CAAC,CAAC;MACFZ,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEO,QAAQ,CAACK,MAAM,CAAC;MAEnD,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBP,QAAQ,CAACK,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMG,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClCjB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEe,IAAI,CAAC;MAEtC,IAAIA,IAAI,CAACE,OAAO,EAAE;QAChB1B,SAAS,CAACwB,IAAI,CAACzB,MAAM,CAAC;QACtBO,cAAc,CAACO,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;QAC1BN,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC7C,CAAC,MAAM;QACLL,QAAQ,CAACoB,IAAI,CAACG,OAAO,IAAI,uBAAuB,CAAC;QACjDnB,OAAO,CAACL,KAAK,CAAC,uBAAuB,EAAEqB,IAAI,CAACG,OAAO,CAAC;MACtD;IACF,CAAC,CAAC,OAAOxB,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDC,QAAQ,CAAC,+BAA+BD,KAAK,CAACwB,OAAO,EAAE,CAAC;IAC1D,CAAC,SAAS;MACRzB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACP,QAAQ,EAAEC,MAAM,EAAEC,WAAW,CAAC,CAAC;EAEnC,MAAM+B,aAAa,GAAGvC,WAAW,CAAC,MAAM;IACtCmB,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtCF,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,MAAMsB,mBAAmB,GAAGxC,WAAW,CAAC,CAACyC,WAAW,EAAEC,OAAO,KAAK;IAChE,IAAI,CAAChC,MAAM,EAAE;IAEbC,SAAS,CAACgC,UAAU,KAAK;MACvB,GAAGA,UAAU;MACbC,UAAU,EAAED,UAAU,CAACC,UAAU,CAACC,GAAG,CAACC,SAAS,IAC7CA,SAAS,CAACC,EAAE,KAAKN,WAAW,GACxB;QAAE,GAAGK,SAAS;QAAEX,IAAI,EAAE;UAAE,GAAGW,SAAS,CAACX,IAAI;UAAE,GAAGO;QAAQ;MAAE,CAAC,GACzDI,SACN;IACF,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAACpC,MAAM,CAAC,CAAC;EAEZ,MAAMsC,gBAAgB,GAAGhD,WAAW,CAAEyC,WAAW,IAAK;IACpD,IAAI,CAAC/B,MAAM,EAAE,OAAO,IAAI;IACxB,OAAOA,MAAM,CAACkC,UAAU,CAACK,IAAI,CAACH,SAAS,IAAIA,SAAS,CAACC,EAAE,KAAKN,WAAW,CAAC;EAC1E,CAAC,EAAE,CAAC/B,MAAM,CAAC,CAAC;EAEZ,MAAMwC,mBAAmB,GAAGlD,WAAW,CAAEmD,aAAa,IAAK;IACzD,IAAI,CAACzC,MAAM,EAAE,OAAO,EAAE;IACtB,OAAOA,MAAM,CAACkC,UAAU,CAACQ,MAAM,CAACN,SAAS,IAAIA,SAAS,CAACO,IAAI,KAAKF,aAAa,CAAC;EAChF,CAAC,EAAE,CAACzC,MAAM,CAAC,CAAC;EAEZX,SAAS,CAAC,MAAM;IACdoB,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAE;MAAEd,QAAQ;MAAEC;IAAO,CAAC,CAAC;IAC3EW,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,OAAO;IACLR,MAAM;IACNE,OAAO;IACPE,KAAK;IACLE,WAAW;IACXuB,aAAa;IACbC,mBAAmB;IACnBQ,gBAAgB;IAChBE;EACF,CAAC;AACH,CAAC;AAACzC,EAAA,CAhGIJ,iBAAiB;AAkGvB,eAAeA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}