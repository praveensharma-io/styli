{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useRef } from 'react';\n\n// API base URL - in production, this would come from environment variables\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\nconst useServerDrivenUI = (pageType, pageId, userContext = {}) => {\n  _s();\n  const [layout, setLayout] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastFetched, setLastFetched] = useState(null);\n\n  // Use ref to store userContext to avoid dependency issues\n  const userContextRef = useRef(userContext);\n  userContextRef.current = userContext;\n\n  // Flag to prevent multiple simultaneous calls\n  const isFetchingRef = useRef(false);\n  const fetchLayout = useCallback(async () => {\n    // Prevent multiple simultaneous calls\n    if (isFetchingRef.current) {\n      return;\n    }\n    try {\n      isFetchingRef.current = true;\n      setLoading(true);\n      setError(null);\n      const queryParams = new URLSearchParams({\n        ...userContextRef.current,\n        timestamp: Date.now() // Cache busting\n      });\n      const apiUrl = `${API_BASE_URL}/api/layouts/${pageType}/${pageId}?${queryParams}`;\n      const response = await fetch(apiUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        mode: 'cors'\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.success) {\n        setLayout(data.layout);\n        setLastFetched(Date.now());\n      } else {\n        setError(data.message || 'Failed to load layout');\n      }\n    } catch (error) {\n      setError(`Failed to load page layout: ${error.message}`);\n    } finally {\n      setLoading(false);\n      isFetchingRef.current = false;\n    }\n  }, [pageType, pageId]);\n  const refreshLayout = useCallback(() => {\n    fetchLayout();\n  }, [fetchLayout]);\n  const updateComponentData = useCallback((componentId, newData) => {\n    if (!layout) return;\n    setLayout(prevLayout => ({\n      ...prevLayout,\n      components: prevLayout.components.map(component => component.id === componentId ? {\n        ...component,\n        data: {\n          ...component.data,\n          ...newData\n        }\n      } : component)\n    }));\n  }, [layout]);\n  const getComponentById = useCallback(componentId => {\n    if (!layout) return null;\n    return layout.components.find(component => component.id === componentId);\n  }, [layout]);\n  const getComponentsByType = useCallback(componentType => {\n    if (!layout) return [];\n    return layout.components.filter(component => component.type === componentType);\n  }, [layout]);\n  useEffect(() => {\n    fetchLayout();\n  }, [pageType, pageId, fetchLayout]);\n  return {\n    layout,\n    loading,\n    error,\n    lastFetched,\n    refreshLayout,\n    updateComponentData,\n    getComponentById,\n    getComponentsByType\n  };\n};\n_s(useServerDrivenUI, \"Iti/RCstt7CpZQy5Ppq9UBbTG2o=\");\nexport default useServerDrivenUI;","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","API_BASE_URL","process","env","REACT_APP_API_URL","useServerDrivenUI","pageType","pageId","userContext","_s","layout","setLayout","loading","setLoading","error","setError","lastFetched","setLastFetched","userContextRef","current","isFetchingRef","fetchLayout","queryParams","URLSearchParams","timestamp","Date","now","apiUrl","response","fetch","method","headers","mode","ok","Error","status","data","json","success","message","refreshLayout","updateComponentData","componentId","newData","prevLayout","components","map","component","id","getComponentById","find","getComponentsByType","componentType","filter","type"],"sources":["/Users/macos/stylii/client/src/hooks/useServerDrivenUI.js"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\n\n// API base URL - in production, this would come from environment variables\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n\nconst useServerDrivenUI = (pageType, pageId, userContext = {}) => {\n  const [layout, setLayout] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastFetched, setLastFetched] = useState(null);\n  \n  // Use ref to store userContext to avoid dependency issues\n  const userContextRef = useRef(userContext);\n  userContextRef.current = userContext;\n  \n  // Flag to prevent multiple simultaneous calls\n  const isFetchingRef = useRef(false);\n\n  const fetchLayout = useCallback(async () => {\n    // Prevent multiple simultaneous calls\n    if (isFetchingRef.current) {\n      return;\n    }\n    \n    try {\n      isFetchingRef.current = true;\n      setLoading(true);\n      setError(null);\n\n      const queryParams = new URLSearchParams({\n        ...userContextRef.current,\n        timestamp: Date.now() // Cache busting\n      });\n\n      const apiUrl = `${API_BASE_URL}/api/layouts/${pageType}/${pageId}?${queryParams}`;\n\n      const response = await fetch(apiUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        mode: 'cors'\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n\n      if (data.success) {\n        setLayout(data.layout);\n        setLastFetched(Date.now());\n      } else {\n        setError(data.message || 'Failed to load layout');\n      }\n    } catch (error) {\n      setError(`Failed to load page layout: ${error.message}`);\n    } finally {\n      setLoading(false);\n      isFetchingRef.current = false;\n    }\n  }, [pageType, pageId]);\n\n  const refreshLayout = useCallback(() => {\n    fetchLayout();\n  }, [fetchLayout]);\n\n  const updateComponentData = useCallback((componentId, newData) => {\n    if (!layout) return;\n\n    setLayout(prevLayout => ({\n      ...prevLayout,\n      components: prevLayout.components.map(component =>\n        component.id === componentId\n          ? { ...component, data: { ...component.data, ...newData } }\n          : component\n      )\n    }));\n  }, [layout]);\n\n  const getComponentById = useCallback((componentId) => {\n    if (!layout) return null;\n    return layout.components.find(component => component.id === componentId);\n  }, [layout]);\n\n  const getComponentsByType = useCallback((componentType) => {\n    if (!layout) return [];\n    return layout.components.filter(component => component.type === componentType);\n  }, [layout]);\n\n  useEffect(() => {\n    fetchLayout();\n  }, [pageType, pageId, fetchLayout]);\n\n  return {\n    layout,\n    loading,\n    error,\n    lastFetched,\n    refreshLayout,\n    updateComponentData,\n    getComponentById,\n    getComponentsByType\n  };\n};\n\nexport default useServerDrivenUI; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}