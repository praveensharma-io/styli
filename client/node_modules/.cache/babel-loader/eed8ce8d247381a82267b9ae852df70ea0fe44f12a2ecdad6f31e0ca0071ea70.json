{"ast":null,"code":"import{useState,useEffect,useCallback,useRef}from'react';// API base URL - in production, this would come from environment variables\nconst API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:3000';const useServerDrivenUI=function(pageType,pageId){let userContext=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const[layout,setLayout]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[lastFetched,setLastFetched]=useState(null);// Use ref to store userContext to avoid dependency issues\nconst userContextRef=useRef(userContext);userContextRef.current=userContext;// Flag to prevent multiple simultaneous calls\nconst isFetchingRef=useRef(false);const fetchLayout=useCallback(async()=>{// Prevent multiple simultaneous calls\nif(isFetchingRef.current){console.log('🔄 Already fetching, skipping...');return;}try{isFetchingRef.current=true;console.log('🔄 Fetching layout:',{pageType,pageId,userContext:userContextRef.current});setLoading(true);setError(null);const queryParams=new URLSearchParams({...userContextRef.current,timestamp:Date.now()// Cache busting\n});const apiUrl=`${API_BASE_URL}/api/layouts/${pageType}/${pageId}?${queryParams}`;console.log('📡 API URL:',apiUrl);// Use the full backend URL since React app is on port 3001 and backend is on port 3000\nconst response=await fetch(apiUrl,{method:'GET',headers:{'Content-Type':'application/json'},mode:'cors'});console.log('📥 Response status:',response.status);if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const data=await response.json();console.log('📦 Response data:',data);if(data.success){setLayout(data.layout);setLastFetched(Date.now());console.log('✅ Layout loaded successfully');}else{setError(data.message||'Failed to load layout');console.error('❌ Layout load failed:',data.message);}}catch(error){console.error('💥 Error fetching layout:',error);setError(`Failed to load page layout: ${error.message}`);}finally{setLoading(false);isFetchingRef.current=false;}},[pageType,pageId]);// Removed userContext from dependencies\nconst refreshLayout=useCallback(()=>{console.log('🔄 Refreshing layout...');fetchLayout();},[fetchLayout]);const updateComponentData=useCallback((componentId,newData)=>{if(!layout)return;setLayout(prevLayout=>({...prevLayout,components:prevLayout.components.map(component=>component.id===componentId?{...component,data:{...component.data,...newData}}:component)}));},[layout]);const getComponentById=useCallback(componentId=>{if(!layout)return null;return layout.components.find(component=>component.id===componentId);},[layout]);const getComponentsByType=useCallback(componentType=>{if(!layout)return[];return layout.components.filter(component=>component.type===componentType);},[layout]);useEffect(()=>{console.log('🎯 useServerDrivenUI effect triggered:',{pageType,pageId});fetchLayout();},[fetchLayout]);return{layout,loading,error,lastFetched,refreshLayout,updateComponentData,getComponentById,getComponentsByType};};export default useServerDrivenUI;","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","API_BASE_URL","process","env","REACT_APP_API_URL","useServerDrivenUI","pageType","pageId","userContext","arguments","length","undefined","layout","setLayout","loading","setLoading","error","setError","lastFetched","setLastFetched","userContextRef","current","isFetchingRef","fetchLayout","console","log","queryParams","URLSearchParams","timestamp","Date","now","apiUrl","response","fetch","method","headers","mode","status","ok","Error","data","json","success","message","refreshLayout","updateComponentData","componentId","newData","prevLayout","components","map","component","id","getComponentById","find","getComponentsByType","componentType","filter","type"],"sources":["/Users/macos/stylii/client/src/hooks/useServerDrivenUI.js"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\n\n// API base URL - in production, this would come from environment variables\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n\nconst useServerDrivenUI = (pageType, pageId, userContext = {}) => {\n  const [layout, setLayout] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastFetched, setLastFetched] = useState(null);\n  \n  // Use ref to store userContext to avoid dependency issues\n  const userContextRef = useRef(userContext);\n  userContextRef.current = userContext;\n  \n  // Flag to prevent multiple simultaneous calls\n  const isFetchingRef = useRef(false);\n\n  const fetchLayout = useCallback(async () => {\n    // Prevent multiple simultaneous calls\n    if (isFetchingRef.current) {\n      console.log('🔄 Already fetching, skipping...');\n      return;\n    }\n    \n    try {\n      isFetchingRef.current = true;\n      console.log('🔄 Fetching layout:', { pageType, pageId, userContext: userContextRef.current });\n      setLoading(true);\n      setError(null);\n\n      const queryParams = new URLSearchParams({\n        ...userContextRef.current,\n        timestamp: Date.now() // Cache busting\n      });\n\n      const apiUrl = `${API_BASE_URL}/api/layouts/${pageType}/${pageId}?${queryParams}`;\n      console.log('📡 API URL:', apiUrl);\n\n      // Use the full backend URL since React app is on port 3001 and backend is on port 3000\n      const response = await fetch(apiUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        mode: 'cors'\n      });\n      console.log('📥 Response status:', response.status);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('📦 Response data:', data);\n\n      if (data.success) {\n        setLayout(data.layout);\n        setLastFetched(Date.now());\n        console.log('✅ Layout loaded successfully');\n      } else {\n        setError(data.message || 'Failed to load layout');\n        console.error('❌ Layout load failed:', data.message);\n      }\n    } catch (error) {\n      console.error('💥 Error fetching layout:', error);\n      setError(`Failed to load page layout: ${error.message}`);\n    } finally {\n      setLoading(false);\n      isFetchingRef.current = false;\n    }\n  }, [pageType, pageId]); // Removed userContext from dependencies\n\n  const refreshLayout = useCallback(() => {\n    console.log('🔄 Refreshing layout...');\n    fetchLayout();\n  }, [fetchLayout]);\n\n  const updateComponentData = useCallback((componentId, newData) => {\n    if (!layout) return;\n\n    setLayout(prevLayout => ({\n      ...prevLayout,\n      components: prevLayout.components.map(component =>\n        component.id === componentId\n          ? { ...component, data: { ...component.data, ...newData } }\n          : component\n      )\n    }));\n  }, [layout]);\n\n  const getComponentById = useCallback((componentId) => {\n    if (!layout) return null;\n    return layout.components.find(component => component.id === componentId);\n  }, [layout]);\n\n  const getComponentsByType = useCallback((componentType) => {\n    if (!layout) return [];\n    return layout.components.filter(component => component.type === componentType);\n  }, [layout]);\n\n  useEffect(() => {\n    console.log('🎯 useServerDrivenUI effect triggered:', { pageType, pageId });\n    fetchLayout();\n  }, [fetchLayout]);\n\n  return {\n    layout,\n    loading,\n    error,\n    lastFetched,\n    refreshLayout,\n    updateComponentData,\n    getComponentById,\n    getComponentsByType\n  };\n};\n\nexport default useServerDrivenUI; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}